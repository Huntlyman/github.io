<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="utf-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1" />
  <title>Hunt Lyman — Weather & River Conditions</title>
  <meta name="description" content="Current weather and river data for Middleburg/Goose Creek and Berryville/Shenandoah." />
  <style>
    :root{
      --bg:#0f172a; --panel:#111827; --muted:#94a3b8; --text:#e5e7eb; --accent:#38bdf8;
      --ok:#22c55e; --warn:#f59e0b; --bad:#ef4444; --card:#0b1225; --shadow: 0 10px 30px rgba(0,0,0,.35); --radius: 18px;
    }
    *{box-sizing:border-box}
    body{
      margin:0; font-family: ui-sans-serif, system-ui, -apple-system, Segoe UI, Roboto, "Helvetica Neue", Arial;
      background: radial-gradient(1200px 800px at 10% 0%, #0b132b 0%, var(--bg) 40%, #0a0f1f 100%);
      color:var(--text); min-height:100svh; display:flex; flex-direction:column; gap:24px;
    }
    header{text-align:center; padding:28px 20px 0}
    header h1{margin:0 0 6px; font-size:clamp(20px, 3.2vw, 36px)}
    header p{margin:0; color:var(--muted); font-size:clamp(12px, 1.7vw, 16px)}

    .row{width:min(1100px, 92%); margin:10px auto 40px; display:grid; grid-template-columns: repeat(auto-fit,minmax(290px,1fr)); gap:18px}
    .card{background:linear-gradient(180deg, rgba(255,255,255,.04), rgba(255,255,255,.02)); border:1px solid rgba(148,163,184,.14); border-radius:var(--radius); padding:18px 16px; box-shadow:var(--shadow)}
    .card h2{margin:0 0 2px; font-size:20px}
    .subtle{color:var(--muted); font-size:12px}
    .current{display:grid; grid-template-columns:auto 1fr; gap:14px; align-items:center; margin-top:10px}
    .temp{font-size:46px; font-weight:700; line-height:1; margin:0}
    .temp small{font-weight:600; font-size:16px; color:var(--muted)}
    .meta{display:grid; grid-template-columns:repeat(2,minmax(0,1fr)); gap:10px; margin-top:12px}
    .metric{background:rgba(148,163,184,.08); border-radius:12px; padding:10px}
    .metric .label{font-size:12px; color:var(--muted)}
    .metric .value{font-size:16px; font-weight:600}
    .forecast{display:flex; gap:8px; overflow:auto; padding-top:8px; margin-top:8px; border-top:1px dashed rgba(148,163,184,.25)}
    .hour{min-width:86px; background:rgba(148,163,184,.06); border:1px solid rgba(148,163,184,.15); border-radius:12px; padding:8px; text-align:center}
    .badge{display:inline-flex; align-items:center; gap:6px; font-size:12px; border-radius:999px; padding:6px 10px; border:1px solid rgba(148,163,184,.2)}
    .ok{background:rgba(34,197,94,.12); border-color:rgba(34,197,94,.35)}
    .warn{background:rgba(245,158,11,.12); border-color:rgba(245,158,11,.35)}
    .bad{background:rgba(239,68,68,.12); border-color:rgba(239,68,68,.35)}
    footer{color:var(--muted); text-align:center; font-size:12px; padding:0 0 24px}
    a{color:var(--accent); text-decoration:none}
    a:hover{text-decoration:underline}
    .stack{display:flex; flex-direction:column; gap:2px}
    .big-icon{font-size:42px; line-height:1}
  </style>
</head>
<body>
  <header>
    <h1>Weather & River Conditions</h1>
    <p>Live weather from Open‑Meteo and river gauges from USGS. Refresh to update.</p>
  </header>

  <!-- Middleburg + Goose Creek row -->
  <div class="row">
    <section class="card" id="card-middleburg">
      <h2>Middleburg, VA</h2>
      <div class="subtle" id="mid-updated">Loading…</div>
      <div class="current"><div class="big-icon" id="mid-icon">⛅</div><div class="stack"><p class="temp" id="mid-temp">—<small>°F</small></p><div class="badge ok" id="mid-badge">Good weather</div></div></div>
      <div class="meta">
        <div class="metric"><div class="label">Feels like</div><div class="value" id="mid-feels">—</div></div>
        <div class="metric"><div class="label">Wind</div><div class="value" id="mid-wind">—</div></div>
        <div class="metric"><div class="label">Precip (1h)</div><div class="value" id="mid-precip">—</div></div>
        <div class="metric"><div class="label">Conditions</div><div class="value" id="mid-cond">—</div></div>
      </div>
      <div class="forecast" id="mid-forecast"></div>
    </section>
    <section class="card" id="card-goose">
      <h2>Goose Creek — near Middleburg</h2>
      <div class="subtle" id="goose-updated">Loading…</div>
      <div class="meta">
        <div class="metric"><div class="label">Discharge</div><div class="value" id="goose-flow">—</div></div>
        <div class="metric"><div class="label">Gage height</div><div class="value" id="goose-stage">—</div></div>
        <div class="metric"><div class="label">Site</div><div class="value"><a href="https://waterdata.usgs.gov/monitoring-location/01643700" target="_blank">01643700</a></div></div>
      </div>
    </section>
  </div>

  <!-- Berryville + Shenandoah row -->
  <div class="row">
    <section class="card" id="card-boyce">
      <h2>Boyce, VA (Shenandoah)</h2>
      <div class="subtle" id="boy-updated">Loading…</div>
      <div class="current"><div class="big-icon" id="boy-icon">⛅</div><div class="stack"><p class="temp" id="boy-temp">—<small>°F</small></p><div class="badge ok" id="boy-badge">Good weather</div></div></div>
      <div class="meta">
        <div class="metric"><div class="label">Feels like</div><div class="value" id="boy-feels">—</div></div>
        <div class="metric"><div class="label">Wind</div><div class="value" id="boy-wind">—</div></div>
        <div class="metric"><div class="label">Precip (1h)</div><div class="value" id="boy-precip">—</div></div>
        <div class="metric"><div class="label">Conditions</div><div class="value" id="boy-cond">—</div></div>
      </div>
      <div class="forecast" id="boy-forecast"></div>
    </section>
    <section class="card" id="card-shen">
      <h2>Shenandoah River — at Millville</h2>
      <div class="subtle" id="shen-updated">Loading…</div>
      <div class="meta">
        <div class="metric"><div class="label">Discharge</div><div class="value" id="shen-flow">—</div></div>
        <div class="metric"><div class="label">Gage height</div><div class="value" id="shen-stage">—</div></div>
        <div class="metric"><div class="label">Site</div><div class="value"><a href="https://waterdata.usgs.gov/monitoring-location/01636500" target="_blank">01636500</a></div></div>
      </div>
    </section>
  </div>

  <footer>
    Data courtesy of <a href="https://open-meteo.com/" target="_blank">Open‑Meteo</a> and <a href="https://waterservices.usgs.gov/" target="_blank">USGS Water Services</a>.
  </footer>

  <script>
    // --- Coordinates ---
    const LOCATIONS = {
      middleburg: { name: 'Middleburg, VA', lat: 38.968, lon: -77.737 },
      boyce: { name: 'Boyce, VA', lat: 39.091, lon: -78.059 }
    };

    const codeToIcon = (code, isDay) => {
      const sun = '☀️', moon='🌙', cloud='☁️', sunCloud='⛅', rain='🌧️', t='⛈️', snow='🌨️', fog='🌫️';
      const day = isDay ? 1 : 0;
      if ([0].includes(code)) return day ? sun : moon;
      if ([1,2].includes(code)) return sunCloud;
      if ([3].includes(code)) return cloud;
      if ([45,48].includes(code)) return fog;
      if ([51,53,55,61,63,65,80,81,82].includes(code)) return rain;
      if ([56,57,66,67].includes(code)) return rain;
      if ([71,73,75,77,85,86].includes(code)) return snow;
      if ([95,96,99].includes(code)) return t;
      return sunCloud;
    };

    const codeToText = (code) => {
      const map = {0:'Clear',1:'Mainly clear',2:'Partly cloudy',3:'Overcast',45:'Fog',48:'Rime fog',51:'Light drizzle',53:'Drizzle',55:'Heavy drizzle',56:'Freezing drizzle',57:'Freezing drizzle',61:'Light rain',63:'Rain',65:'Heavy rain',66:'Freezing rain',67:'Heavy freezing rain',71:'Light snow',73:'Snow',75:'Heavy snow',77:'Snow grains',80:'Rain showers',81:'Heavy showers',82:'Violent rain',85:'Snow showers',86:'Heavy snow showers',95:'Thunderstorm',96:'Thunder w/ hail',99:'Thunder w/ heavy hail'};
      return map[code] || '—';
    };

    const degToCompass = (deg) => {
      const dirs = ['N','NNE','NE','ENE','E','ESE','SE','SSE','S','SSW','SW','WSW','W','WNW','NW','NNW'];
      return dirs[Math.round(deg / 22.5) % 16];
    };

    async function loadLocation({lat, lon}, prefix){
      const url = new URL('https://api.open-meteo.com/v1/forecast');
      url.search = new URLSearchParams({
        latitude: lat,
        longitude: lon,
        current: ['temperature_2m','apparent_temperature','is_day','precipitation','weather_code','wind_speed_10m','wind_direction_10m'].join(','),
        hourly: ['temperature_2m','precipitation_probability','weather_code','wind_speed_10m'].join(','),
        forecast_days: 2,
        timezone: 'auto',
        temperature_unit: 'fahrenheit',
        wind_speed_unit: 'mph',
        precipitation_unit: 'inch'
      }).toString();

      try{
        const res = await fetch(url.toString());
        if(!res.ok) throw new Error('Network response was not ok');
        const data = await res.json();
        const c = data.current;
        document.getElementById(prefix+'-icon').textContent = codeToIcon(c.weather_code, c.is_day === 1);
        document.getElementById(prefix+'-temp').innerHTML = `${Math.round(c.temperature_2m)}<small>°F</small>`;
        document.getElementById(prefix+'-feels').textContent = `${Math.round(c.apparent_temperature)}°F`;
        document.getElementById(prefix+'-wind').textContent = `${Math.round(c.wind_speed_10m)} mph ${degToCompass(c.wind_direction_10m)}`;
        document.getElementById(prefix+'-precip').textContent = `${(c.precipitation ?? 0).toFixed(2)} in`;
        document.getElementById(prefix+'-cond').textContent = codeToText(c.weather_code);
        document.getElementById(prefix+'-updated').textContent = `Updated ${new Date().toLocaleString()}`;
        const badge = document.getElementById(prefix+'-badge');
        const windy = (c.wind_speed_10m || 0) >= 15;
        const wet = (c.precipitation || 0) >= 0.05;
        const cls = wet ? 'bad' : windy ? 'warn' : 'ok';
        badge.className = `badge ${cls}`;
        badge.textContent = wet ? 'Wet' : windy ? 'Breezy' : 'Good weather';

        // next 12 hours
        const hoursEl = document.getElementById(prefix+'-forecast');
        if(hoursEl){
          hoursEl.innerHTML = '';
          const now = Date.now();
          const times = data.hourly.time.map(t => new Date(t).getTime());
          for(let i=0, shown=0; i<times.length && shown<12; i++){
            if(times[i] < now) continue;
            const temp = data.hourly.temperature_2m[i];
            const wcode = data.hourly.weather_code[i];
            const pprob = data.hourly.precipitation_probability[i];
            const wicon = codeToIcon(wcode, true);
            const tlabel = new Date(times[i]).toLocaleTimeString([], {hour:'numeric'});
            const box = document.createElement('div');
            box.className = 'hour';
            box.innerHTML = `<div class="tt">${tlabel}</div><div class="big-icon">${wicon}</div><div class="t">${Math.round(temp)}°</div><div class="tt">💧 ${pprob ?? 0}%</div>`;
            hoursEl.appendChild(box);
            shown++;
          }
        }
      } catch(e){
        console.error(e);
        const el = document.getElementById(prefix+'-updated');
        if(el) el.textContent = 'Unable to load weather.';
      }
    }

    // --- USGS River data ---
    async function loadUSGS(site, prefix){
      const url = new URL('https://waterservices.usgs.gov/nwis/iv/');
      url.search = new URLSearchParams({ format:'json', sites: site, parameterCd: '00060,00065' }).toString();
      try{
        const res = await fetch(url.toString());
        if(!res.ok) throw new Error('USGS request failed');
        const data = await res.json();
        const series = data.value?.timeSeries || [];
        const findVal = (code) => {
          const s = series.find(s => s.variable?.variableCode?.[0]?.value === code);
          const v = s?.values?.[0]?.value; if(!v || v.length === 0) return null;
          return v[v.length-1];
        };
        const q = findVal('00060');
        const h = findVal('00065');
        const flowEl = document.getElementById(prefix+'-flow');
        const stageEl = document.getElementById(prefix+'-stage');
        if(flowEl && q) flowEl.textContent = `${Number(q.value).toLocaleString()} cfs`;
        if(stageEl && h) stageEl.textContent = `${Number(h.value).toFixed(2)} ft`;
        const updatedIso = (q?.dateTime || h?.dateTime);
        const updEl = document.getElementById(prefix+'-updated');
        if(updatedIso && updEl){ updEl.textContent = `Updated ${new Date(updatedIso).toLocaleString()}`; }
      } catch(err){
        console.error(err);
        const el = document.getElementById(prefix+'-updated');
        if(el) el.textContent = 'Unable to load USGS data.';
      }
    }

    // Kick off loads
    loadLocation(LOCATIONS.middleburg, 'mid');
    loadLocation(LOCATIONS.boyce, 'boy');
    loadUSGS('01643700','goose');
    loadUSGS('01636500','shen');
  </script>
</body>
</html>
